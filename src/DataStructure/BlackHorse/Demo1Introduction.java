package DataStructure.BlackHorse;
/*
* 栈Stack：先进后出，后入先出。
* 队列：先进先出，后入后出。
* 数组：查询快（地址连续，通过首地址查询），增删慢（长度固定不变，增删需要创新新数组，复制原数组，销毁数组）
* 链表：查询慢（不是连续的，每次查询，必须从头开始），增删快。
*   组成： 自己地址+数据+下一节点地址。
*   单向链表（无序）：链表中只有一条链，不保证顺序，存储与取出可能不一致
*   双向链表（有序）：链表中有两条链子，一条负责记录顺序，
*树形结构
*   查找树/排序树：左子树小，右子树大，
*   平衡树/不平衡树：左右孩子（不）相等
*   红黑树：趋近于平衡树，查询快，查询子节点最大最小次数不超过2倍
*           约束：
*                1.节点是红色或者黑色
*                2.根节点是黑色的，叶子节点是黑色，红色节点子节点是黑色
*                3.任何一个几点到其每一个子节点所有路径上的黑色节点数相同
*
*
*
* */
public class Demo1Introduction {
}
